<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yin.Infrastructure</name>
    </assembly>
    <members>
        <member name="P:Volo.Abp.Guids.AbpSequentialGuidGeneratorOptions.DefaultSequentialGuidType">
            <summary>
            Default value: null (unspecified).
            Use <see cref="M:Volo.Abp.Guids.AbpSequentialGuidGeneratorOptions.GetDefaultSequentialGuidType"/> method
            to get the value on use, since it fall backs to a default value.
            </summary>
        </member>
        <member name="M:Volo.Abp.Guids.AbpSequentialGuidGeneratorOptions.GetDefaultSequentialGuidType">
            <summary>
            Get the <see cref="P:Volo.Abp.Guids.AbpSequentialGuidGeneratorOptions.DefaultSequentialGuidType"/> value
            or returns <see cref="F:Volo.Abp.Guids.SequentialGuidType.SequentialAtEnd"/>
            if <see cref="P:Volo.Abp.Guids.AbpSequentialGuidGeneratorOptions.DefaultSequentialGuidType"/> was null.
            </summary>
        </member>
        <member name="T:Volo.Abp.Guids.IGuidGenerator">
            <summary>
            Used to generate Ids.
            </summary>
        </member>
        <member name="M:Volo.Abp.Guids.IGuidGenerator.Create">
            <summary>
            Creates a new <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="T:Volo.Abp.Guids.SequentialGuidGenerator">
            <summary>
            Implements <see cref="T:Volo.Abp.Guids.IGuidGenerator"/> by creating sequential Guids.
            Use <see cref="T:Volo.Abp.Guids.AbpSequentialGuidGeneratorOptions"/> to configure.
            </summary>
        </member>
        <member name="T:Volo.Abp.Guids.SequentialGuidType">
            <summary>
            Describes the type of a sequential GUID value.
            </summary>
        </member>
        <member name="F:Volo.Abp.Guids.SequentialGuidType.SequentialAsString">
            <summary>
            The GUID should be sequential when formatted using the <see cref="M:System.Guid.ToString" /> method.
            Used by MySql and PostgreSql.
            </summary>
        </member>
        <member name="F:Volo.Abp.Guids.SequentialGuidType.SequentialAsBinary">
            <summary>
            The GUID should be sequential when formatted using the <see cref="M:System.Guid.ToByteArray" /> method.
            Used by Oracle.
            </summary>
        </member>
        <member name="F:Volo.Abp.Guids.SequentialGuidType.SequentialAtEnd">
            <summary>
            The sequential portion of the GUID should be located at the end of the Data4 block.
            Used by SqlServer.
            </summary>
        </member>
        <member name="F:Yin.Infrastructure.Cache.EasyCachingCustomerInterceptor.TypeofTaskResultMethod">
            <summary>
            The typeof task result method.
            </summary>
        </member>
        <member name="F:Yin.Infrastructure.Cache.EasyCachingCustomerInterceptor.MethodAttributes">
            <summary>
            The typeof task result method.
            </summary>
        </member>
        <member name="M:Yin.Infrastructure.Cache.EasyCachingCustomerInterceptor.ProceedAbleAsync(AspectCore.DynamicProxy.AspectContext,AspectCore.DynamicProxy.AspectDelegate)">
            <summary>
            Proceeds the able async.
            </summary>
            <returns>The able async.</returns>
            <param name="context">Context.</param>
            <param name="next">Next.</param>
        </member>
        <member name="M:Yin.Infrastructure.Cache.EasyCachingCustomerInterceptor.ProcessPutAsync(AspectCore.DynamicProxy.AspectContext)">
            <summary>
            Processes the put async.
            </summary>
            <returns>The put async.</returns>
            <param name="context">Context.</param>
        </member>
        <member name="M:Yin.Infrastructure.Cache.EasyCachingCustomerInterceptor.ProcessEvictAsync(AspectCore.DynamicProxy.AspectContext,System.Boolean)">
            <summary>
            Processes the evict async.
            </summary>
            <returns>The evict async.</returns>
            <param name="context">Context.</param>
            <param name="isBefore">If set to <c>true</c> is before.</param>
        </member>
        <member name="P:Yin.Infrastructure.Cache.EasyCachingEvictCustomerAttribute.EvictAllPrefixKeys">
            <summary>
            移除所有 prefixKey
            </summary>
        </member>
        <member name="T:Yin.Infrastructure.Common.CommonGenerateHelper">
            <summary>
            通用生成类
            </summary>
        </member>
        <member name="M:Yin.Infrastructure.Common.CommonGenerateHelper.RandCode(System.Int32)">
            <summary>
            生成N位随机数 
            </summary>
            <param name="n">N位随机数</param>
            <returns>生成的N位随机数</returns>
        </member>
        <member name="M:Yin.Infrastructure.Common.CommonGenerateHelper.MailShowHide(System.String)">
            <summary>
            邮箱显示
            大于6位邮箱 前三位 **** 后三位@
            小于6位邮箱 前两位 **** 后两位
            小于4位邮箱 前一位 **** 后一位
            </summary>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Common.CommonGenerateHelper.PhoneNumberShowHide(System.String)">
            <summary>
            手机号显示
            </summary>
            <param name="phoneNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Common.CommonGenerateHelper.DateTime24Show(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            24 小时 显示
            几小时前
            几分钟前
            超过24小时 显示 实际日期
            </summary>
            <param name="time"></param>
            <param name="now">默认为 DateTime.Now</param>
            <returns></returns>
        </member>
        <member name="T:Yin.Infrastructure.Common.EncryptionHelper">
            <summary>
            加密相关类
            </summary>
        </member>
        <member name="M:Yin.Infrastructure.Common.EncryptionHelper.ToMd5(System.String,System.Boolean)">
            <summary>
            MD5加密（之前老密码 没有补全16进制,可能不满32位）
            </summary>
            <param name="str">待加密字符串</param>
            <param name="is32">是否补全32位</param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Common.EncryptionHelper.CheckMd5Salt(System.String,System.String,System.String)">
            <summary>
            验证md5值
            盐值为空，则不计算盐值(之前老密码没有验证)
            </summary>
            <param name="str">字符串</param>
            <param name="md5Str">md5加密后(有盐值为带盐加密，无盐则原字符串MD5)的字符串</param>
            <param name="salt">盐值</param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Common.TextOperationHelper.ReplaceHtml(System.String)">
            <summary>
            对html 进行转义
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="T:Yin.Infrastructure.Common.ValidateHelper">
            <summary>
            验证类公共方法
            </summary>
        </member>
        <member name="M:Yin.Infrastructure.Common.ValidateHelper.IsNumeric(System.String)">
            <summary>
            检查一个字符串是否是纯数字构成的，一般用于查询字符串参数的有效性验证。
            </summary>
            <param name="value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:Yin.Infrastructure.Common.ValidateHelper.IsNumber(System.String)">
            <summary>
            判断是否是数字，包括小数和整数。
            </summary>
            <param name="value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:Yin.Infrastructure.Common.ValidateHelper.IsMobilePhone(System.String)">
            <summary>
            判断输入的字符串是否是一个合法的手机号
            </summary>
            <param name="value">需验证的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Common.ValidateHelper.IsHKOrMacaoPassport(System.String)">
            <summary>  
            验证港澳通行证
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Yin.Infrastructure.Common.ValidateHelper.CheckIDCard(System.String)">
            <summary>
            身份证验证
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Common.ValidateHelper.CheckIDCard18(System.String)">
            <summary>
            18位身份证验证
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Common.ValidateHelper.CheckIDCard15(System.String)">
            <summary>
            15位身份证验证
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Common.ValidateHelper.IsEmail(System.String)">
            <summary>
            验证是否是有效邮箱地址
            </summary>
            <param name="strln">输入的字符</param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Common.ValidateHelper.QuickValidate(System.String,System.String)">
            <summary>
            快速验证一个字符串是否符合指定的正则表达式。
            </summary>
            <param name="express">正则表达式的内容。</param>
            <param name="value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:Yin.Infrastructure.Common.ValidateHelper.IsCN(System.String)">
            <summary>
            姓名验证（验证汉字）
            </summary>
            <param name="strInput">待验证的字符串</param>
            <returns>是中文返回true,否则false</returns>
        </member>
        <member name="M:Yin.Infrastructure.Common.ValidateHelper.UnicodeToUTF_16(System.Int32)">
            <summary>
            CodePoint转UTF-16编码（两字节或者四字节）
            </summary>
            <param name="CodePoint"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Common.ValidateHelper.JudegeCN(System.String,System.Int32,System.Int32)">
            <summary>
            判断是否是汉子
            </summary>
            <param name="text"></param>
            <param name="minLength"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Common.ValidateHelper.UTF_16ToUnicode(System.String)">
            <summary>
            获得四字节UTF-16编码的CodePoint
            </summary>
            <param name="codeStr"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Event.EasyNetQHelper.PublishAsync``1(System.String,System.String,``0,System.String)">
            <summary>
            发送消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exchangeName">交换机名称</param>
            <param name="routeKey">topic</param>
            <param name="message">消息体</param>
            <param name="queueName">队列名称(若队列不存在，消息会丢失)</param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Event.EventExtension.Subscribe``1(Yin.Infrastructure.Event.IntegrationEvenEto{``0},System.Func{System.Threading.Tasks.Task},System.String,Yin.Infrastructure.Redis.IRedisHelper,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            订阅（只进行了消息幂等性校验）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
            <param name="action"></param>
            <param name="actionName"></param>
            <param name="redisHelper"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:Yin.Infrastructure.Event.IEventBus">
            <summary>
             直接发送消息，清使用 easyNetQHelper
             这个并发搞的情况会造成性能原因
             有dbContext 使用这个
            </summary>
        </member>
        <member name="M:Yin.Infrastructure.Event.IEventBus.AddPublish(Yin.Infrastructure.Event.IIntegrationEvent{Yin.Infrastructure.Event.IEventModel})">
            <summary>
            添加到内存中，saveChange 后发送
            </summary>
            <param name="event"></param>
        </member>
        <member name="M:Yin.Infrastructure.Event.IEventBus.PublishEventUseTransit(Yin.Infrastructure.Event.IIntegrationEvent{Yin.Infrastructure.Event.IEventModel})">
            <summary>
            直接发送 聚合事件(不会包含在事务中)会记录到数据库(cap)
            </summary>
            <param name="event"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Event.IEventBus.PublishEventNoTransit(System.Collections.Generic.List{Yin.Infrastructure.Event.IIntegrationEvent{Yin.Infrastructure.Event.IEventModel}})">
            <summary>
            直接发送 聚合事件，会记录到数据库(cap)
            (不会开启事务)
            ps：直接发送消息，不需要和事务
            </summary>
            <param name="events"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Event.IEventBus.PublishImmediately(System.Collections.Generic.List{Yin.Infrastructure.Event.IIntegrationEvent{Yin.Infrastructure.Event.IEventModel}})">
            <summary>
            使用EasyNetQ发送消息，不会进行发布者确认，不会记录到数据库
            </summary>
            <returns></returns>
        </member>
        <member name="T:Yin.Infrastructure.Event.IEventModel">
            <summary>
            聚合事件标识
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Event.IIntegrationEvent`1.Id">
            <summary>
            消息唯一id
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Event.IIntegrationEvent`1.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Event.IIntegrationEvent`1.Message">
            <summary>
            消息体
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Event.IIntegrationEvent`1.Description">
            <summary>
            消息描述
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Event.IIntegrationEvent`1.Exchange">
            <summary>
            exchange
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Event.IIntegrationEvent`1.Queue">
            <summary>
            queue
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Event.IIntegrationEvent`1.Topic">
            <summary>
            topic
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Event.IIntegrationEvent`1.ForwardTopic">
            <summary>
            转发消息的 topic
            </summary>
        </member>
        <member name="T:Yin.Infrastructure.Event.IntegrationEvenEto`1">
            <summary>
            cap 消息 体
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Yin.Infrastructure.Event.IntegrationEvenEto`1.Id">
            <summary>
             消息 id
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Event.IntegrationEvenEto`1.CreateTime">
            <summary>
             创建时间
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Event.IntegrationEvenEto`1.Message">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Event.IntegrationEvenEto`1.Topic">
            <summary>
             topic
            </summary>
        </member>
        <member name="M:Yin.Infrastructure.Event.IntegrationEvent`1.#ctor(System.String,`0,System.String)">
            <summary>
            
            </summary>
            <param name="topic"></param>
            <param name="message"></param>
            <param name="description"></param>
        </member>
        <member name="P:Yin.Infrastructure.Event.IntegrationEvent`1.Exchange">
            <summary>
             使用 cap 发布消息时，当前属性设置无效，exchange 与 cap配置的保持一致
             使用 easyNetQ 发布消息时，使用当前属性
            </summary>
        </member>
        <member name="F:Yin.Infrastructure.Event.MqConst.DefaultExchangeName">
            <summary>
            当前exchange
            </summary>
        </member>
        <member name="T:Yin.Infrastructure.Exceptions.MyException">
            <summary>
            逻辑错误异常
            </summary>
        </member>
        <member name="T:Yin.Infrastructure.Exceptions.MyValidateException">
            <summary>
            数据验证异常
            </summary>
        </member>
        <member name="T:Yin.Infrastructure.Extensions.ObjectExtension">
            <summary>
             ObjectExtension 
            </summary>
        </member>
        <member name="M:Yin.Infrastructure.Extensions.ObjectExtension.NotNullAndEmpty(System.String)">
            <summary>
            判断是否为null "string"
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Extensions.ObjectExtension.PropResolve(System.String,Yin.Infrastructure.Extensions.PropNameResolve)">
            <summary>
            文字转大小写
            </summary>
            <param name="s"></param>
            <param name="resolve"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Extensions.ObjectExtension.IsNullOrEmpty(System.String)">
            <summary>
            string.IsNullOrEmpty
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Extensions.ObjectExtension.GenerateRequestPar(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            生成请求参数
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Extensions.ObjectExtension.ObjectToMap(System.Object)">
            <summary>
            对象转字典
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Extensions.ObjectExtension.SubList``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            把list分成小list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:Yin.Infrastructure.Extensions.PropNameResolve">
            <summary>
            首字母格式enum
            </summary>
        </member>
        <member name="F:Yin.Infrastructure.Extensions.PropNameResolve.CamelCase">
            <summary>
            首字母小写
            </summary>
        </member>
        <member name="F:Yin.Infrastructure.Extensions.PropNameResolve.AllUpper">
            <summary>
            全部大写
            </summary>
        </member>
        <member name="F:Yin.Infrastructure.Extensions.PropNameResolve.AllLower">
            <summary>
            全部小写
            </summary>
        </member>
        <member name="T:Yin.Infrastructure.Extensions.ComparerString">
             <summary>
            字典排序
             </summary>
        </member>
        <member name="M:Yin.Infrastructure.Extensions.ComparerString.Compare(System.String,System.String)">
            <summary>
            https://www.cnblogs.com/similar/p/6739293.html
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Yin.Infrastructure.Model.MessageModel.MailModel">
            <summary>
             发送邮件
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.MessageModel.MailModel.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.MessageModel.MailModel.Body">
            <summary>
            邮件body
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.MessageModel.MailModel.SendEmail">
            <summary>
            收件人
            </summary>
        </member>
        <member name="M:Yin.Infrastructure.Model.MessageModel.MailModel.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="title">标题</param>
            <param name="body">Body</param>
            <param name="sendEmail">SendEmail</param>
        </member>
        <member name="P:Yin.Infrastructure.Model.MessageModel.SendMsgCodeModel.MobileNumber">
            <summary>
            手机号
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.MessageModel.SendMsgCodeModel.Code">
            <summary>
            验证码
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.MessageModel.SendMsgCodeModel.CodeType">
            <summary>
             验证码类型
            0-默认，不指定验证码类别，30min
            1-用户短信注册验证码，通过短信注册时校验手机号是否属于用户，30min
            2-忘记密码后找回密码时使用，5min
            3-通过各种第三方注册后进行绑定手机号操作时使用，2min
            4-修改手机号，10min
            5-修改密码，5min
            6-手机号动态登录 30min
            7-绑定微信uid、手机号
            8-注册密码 （注册之后发送的用户密码）
            </summary>
        </member>
        <member name="M:Yin.Infrastructure.Model.MessageModel.SendMsgCodeModel.#ctor(System.String,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="mobileNumber"></param>
            <param name="codeType">
            0-默认，不指定验证码类别，30min
            1-用户短信注册验证码，通过短信注册时校验手机号是否属于用户，30min
            2-忘记密码后找回密码时使用，5min
            3-通过各种第三方注册后进行绑定手机号操作时使用，2min
            4-修改手机号，10min
            5-修改密码，5min
            6-手机号动态登录 30min
            7-绑定微信uid、手机号
            8-注册密码 （注册之后发送的用户密码）</param>
            <param name="code">验证码类容</param>
        </member>
        <member name="T:Yin.Infrastructure.Model.MessageModel.SensorsModel">
            <summary>
            已附加有 track_id
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.MessageModel.SmsModel.ReceiverPhoneNumber">
            <summary>
            接收人手机号
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.MessageModel.SmsModel.ReceiverName">
            <summary>
            接收人姓名
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.MessageModel.SmsModel.ContentMsg">
            <summary>
            发短信的内容
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.MessageModel.SmsModel.SendName">
            <summary>
            发件人姓名
            </summary>
        </member>
        <member name="M:Yin.Infrastructure.Model.MessageModel.SmsModel.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="receiverPhoneNumber">接收人手机号</param>
            <param name="receiverName">接收人姓名(一般是手机号)</param>
            <param name="contentMsg">发短信的内容</param>
            <param name="sendName">发件人姓名</param>
        </member>
        <member name="P:Yin.Infrastructure.Model.NormalSelect`2.Id">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.NormalSelect`2.Value">
            <summary>
            Key
            </summary>
        </member>
        <member name="T:Yin.Infrastructure.Model.PaginatedList`1">
            <summary>
            分页model
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Yin.Infrastructure.Model.PaginatedList`1.Page">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.PaginatedList`1.PageSize">
            <summary>
            每页数据
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.PaginatedList`1.PageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.PaginatedList`1.TotalItemsCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.PaginatedList`1.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.PaginatedList`1.HasPrevious">
            <summary>
            是否有上一页
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.PaginatedList`1.HasNext">
            <summary>
            是否有下一页
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.QueryParameters.PageIndex">
            <summary>
            当前页面
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.QueryParameters.PageSize">
            <summary>
            每页数据
            </summary>
        </member>
        <member name="M:Yin.Infrastructure.Model.QueryParameters.CheckRequest(System.Int32)">
            <summary>
            检查request 
            </summary>
            <param name="totalCount"></param>
        </member>
        <member name="T:Yin.Infrastructure.Model.ResponseType`1">
            <summary>
            通用返回类型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Yin.Infrastructure.Model.ResponseType`1.Code">
            <summary>
             http 状态码
             成功 200 
             失败 100 系列
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.ResponseType`1.Msg">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.ResponseType`1.Data">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="M:Yin.Infrastructure.Model.ResponseType`1.Ok(`0,System.String)">
            <summary>
            ok
            </summary>
            <param name="data"></param>
            <param name="msg"></param>
        </member>
        <member name="P:Yin.Infrastructure.Model.ResponseType.Code">
            <summary>
             http 状态码
             成功 200 
             失败 100 系列
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.ResponseType.Msg">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:Yin.Infrastructure.Model.ResponseType.Data">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="F:Yin.Infrastructure.Model.UserRoleType.PersonalUser">
            <summary>
            普通用户
            </summary>
        </member>
        <member name="F:Yin.Infrastructure.Model.UserRoleType.AdminUser">
            <summary>
            后台用户
            </summary>
        </member>
        <member name="F:Yin.Infrastructure.Model.UserRoleType.SystemService">
            <summary>
            系统服务
            </summary>
        </member>
        <member name="M:Yin.Infrastructure.Redis.IRedisLockKey.LockWorkAsync``1(System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            
            </summary>
            <param name="resource">锁定的对象</param>
            <param name="expiredTime">锁定过期时间，锁区域内的逻辑执行如果超过过期时间，锁将被释放</param>
            <param name="waitTime">等待时间,相同的 resource 如果当前的锁被其他线程占用,最多等待时间</param>
            <param name="retryTime">等待时间内，多久尝试获取一次</param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Redis.IRedisLockKey.LockWork``1(System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Func{``0})">
            <summary>
            
            </summary>
            <param name="resource">锁定的对象</param>
            <param name="expiredTime">锁定过期时间，锁区域内的逻辑执行如果超过过期时间，锁将被释放</param>
            <param name="waitTime">等待时间,相同的 resource 如果当前的锁被其他线程占用,最多等待时间</param>
            <param name="retryTime">等待时间内，多久尝试获取一次</param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Redis.IRedisLockKey.LockWork``1(System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resource">锁定的对象</param>
            <param name="expiredTime">锁定过期时间，锁区域内的逻辑执行如果超过过期时间，锁将被释放</param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Redis.RedisExtension.GetKeysAsync(StackExchange.Redis.IDatabase,System.String)">
            <summary>
            模糊查询
            使用 scan ， keys 影响性能
            http://doc.redisfans.com/key/scan.html
            </summary>
            <param name="db"></param>
            <param name="pattern">参数来匹配</param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Redis.RedisExtension.KeyBatchDeleteAsync(StackExchange.Redis.IDatabase,System.String)">
            <summary>
            批量删除key
            </summary>
            <param name="db"></param>
            <param name="pattern">参数匹配</param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Redis.RedisHelper.GetDatabase(System.Int32)">
            <summary>
            社区默认使用 72
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:Yin.Infrastructure.Redis.RedisLockKey.LockWorkAsync``1(System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            
            </summary>
            <param name="resource">锁定的对象</param>
            <param name="expiredTime">锁定过期时间，锁区域内的逻辑执行如果超过过期时间，锁将被释放</param>
            <param name="waitTime">等待时间,相同的 resource 如果当前的锁被其他线程占用,最多等待时间</param>
            <param name="retryTime">等待时间内，多久尝试获取一次</param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Redis.RedisLockKey.LockWork``1(System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Func{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resource"></param>
            <param name="expiredTime"></param>
            <param name="waitTime"></param>
            <param name="retryTime"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Redis.RedisLockKey.LockWorkAsync``1(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resource"></param>
            <param name="expiredTime"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Yin.Infrastructure.Redis.RedisLockKey.LockWork``1(System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resource"></param>
            <param name="expiredTime"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Yin.Infrastructure.SwaggerAttribute.SwaggerRoleDataAttribute">
            <summary>
            接口权限
            </summary>
        </member>
        <member name="M:Yin.Infrastructure.SwaggerAttribute.SwaggerRoleDataAttribute.#ctor(System.String)">
            <summary>
            接口权限
            例如：PersonalUser
            </summary>
            <param name="value">例如：PersonalUser</param>
        </member>
        <member name="T:Yin.Infrastructure.SwaggerAttribute.SwaggerScopeDataAttribute">
            <summary>
            使用范围
            </summary>
        </member>
        <member name="M:Yin.Infrastructure.SwaggerAttribute.SwaggerScopeDataAttribute.#ctor(System.String[])">
            <summary>
            适用范围，对个用 、隔开、管理端、自动任务
            例如：APP、PC、Mobile
            </summary>
            <param name="scope">例如：APP、PC、Mobile、管理端、自动任务</param>
        </member>
        <member name="M:Yin.Infrastructure.SwaggerAttribute.SwaggerScopeListDataAttribute.#ctor(Yin.Infrastructure.SwaggerAttribute.SwaggerScopeEnum[])">
            <summary>
            适用范围，对个用 、隔开、管理端、自动任务
            例如：APP、PC、Mobile
            </summary>
            <param name="scope">例如：APP、PC、Mobile、管理端、自动任务</param>
        </member>
    </members>
</doc>
